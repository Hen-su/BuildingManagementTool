@model DocumentViewModel

<div class="viewHeader container-fluid viewHeader row row-cols-2 justify-content-between p-0">
    @if (Model.CurrentCategory.CategoryId != null)
    {
        <h1 class="col my-3 fw-bolder">@Model.CurrentCategory.Category.CategoryName</h1>
    }
    else
    {
        <h1 class="col">@Model.CurrentCategory.CustomCategory</h1>
    }
    <button class="collapseBtn col btn btn-close" type="button"></button>
</div>

<h1 class="my-3 fw-bold">Notes</h1>
<div class="alert alert-dark d-inline-block" role="alert">
    Select up to 2 notes to display in the canvas
</div>
<div id="documentNotesContainer" style="display: none;">
</div>

<h1 class="my-3 fw-bold">Documents</h1>

@if (Model.Role == "Manager")
{
    <button id="uploadModalBtn" class="btn-success btn-md rounded">Upload</button>
}

<div class="col-auto mt-3 float-left" style="top: 15rem">
    
<div class="container-fluid p-0 row justify-content-between" id="documentContainer">
    <partial name="_DocumentList" model="@Model.Documents"></partial>
</div>
<div class="col-auto mt-3 float-right" style="position: fixed; right:5rem; top: 11rem">
    <div id="documentOptionsContainer">
    </div>
</div>


</div>

<div id="modalContainer" class="modal shadow" role="dialog"></div>

<script>
    $(document).ready(function () {
        var propertyCategoryId = @Model.CurrentCategory.PropertyCategoryId;
        $("#documentNotesContainer").hide();
        loadDocumentNotesForCategory(propertyCategoryId);


        $("#uploadModalBtn").click(function () {
            const propertyCategoryId = @Model.CurrentCategory.PropertyCategoryId;
            const url = "/Document/UploadFormPartial/" + encodeURIComponent(propertyCategoryId);
            $("#modalContainer").load(url, function () {
                $("#modalContainer").modal("show");
            });
        });

        $('#modalContainer').on('hide.bs.modal', function () {
            $(this).empty();
        });

        $(document).on('shown.bs.modal', '.modal', function () {
            $('.modal-backdrop').before($(this));
        });

        $(document).on("click", "#confirmDeleteBtn", function () {
            console.log("confirm clicked")
            var documentId = $(this).data("id")
            $.ajax({
                url: '/Blob/DeleteBlob',
                type: 'POST',
                data: { id: documentId },
                success: function (response) {
                    if (response.success) {
                        $.ajax({
                            url: '/Document/UpdateList',
                            type: 'GET',
                            data: { id: @Model.CurrentCategory.PropertyCategoryId },
                            success: function (result) {
                                // Replace the document list with the updated content
                                $('#documentContainer').html(result);
                                $('#modalContainer').modal('hide');
                                $('#documentOptionsContainer').empty();
                                //to reload the notes list once a document is deleted
                                loadDocumentNotesForCategory(@Model.CurrentCategory.PropertyCategoryId);

                            },
                            error: function () {
                                alert('An error occurred while updating the document list.');
                            }
                        });
                    } else {
                        displayErrorMessage(response);
                    }
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                }
            });
        })

        $(document).off("click", "#submitBtn").on("click", "#submitBtn", function (ev) {
            ev.preventDefault();

            $('#submitBtn').prop('disabled', true).text('Uploading...');

            var form = $('#uploadForm')[0];
            var formData = new FormData(form)
            formData.append('id', @Model.CurrentCategory.PropertyCategoryId);
            console.log("submit")

            $.ajax({
                url: '/Blob/UploadBlob',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        $.ajax({
                            url: '/Document/UpdateList',
                            type: 'GET',
                            data: { id: @Model.CurrentCategory.PropertyCategoryId },
                            success: function (result) {
                                // Replace the document list with the updated content
                                $('#documentContainer').html(result);
                                $('#modalContainer').modal('hide');
                                console.log($('#modalContainer'))
                                $('#submitBtn').prop('disabled', false).text('Upload Now');
                            },
                            error: function () {
                                alert('An error occurred while updating the document list.');
                            }
                        });
                    } else {
                        displayErrorMessage(response);
                        $('#submitBtn').prop('disabled', false).text('Upload Now');
                    }
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                    $('#submitBtn').prop('disabled', false).text('Upload Now');
                }
            });
        })

        $(document).off("click", "#submitNoteBtn").on("click", "#submitNoteBtn", function () {
            const note = $("#noteInput").val();
            const documentId = $(this).data("id");
            const noteForm = $("#addNoteForm");
            const formData = new FormData(noteForm[0]);
            formData.append('documentId', documentId);
            $('#submitNoteBtn').prop('disabled', true).text('Saving...');

            $.ajax({
                url: '/Document/AddNoteToDocument',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.success) {
                        $('#modalContainer').modal('hide');

                        // Reload only the notes section to see the updated changes
                        loadDocumentNotesForCategory(@Model.CurrentCategory.PropertyCategoryId);

                    } else {
                        $('#modalContainer').html(response);
                    }
                    $('#submitNoteBtn').prop('disabled', false).text('Create Note');
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                    $('#submitNoteBtn').prop('disabled', false).text('Create Note');
                }
            });
        });
    });

    //Display error message in upload form
    function displayErrorMessage(response) {
        let message = 'An unexpected error occurred.';

        if (response.responseJSON && response.responseJSON.message) {
            message = response.responseJSON.message;
        } else if (response.message) {
            message = response.message;
        } else if (response.statusText) {
            message = response.statusText;
        }

        $('.errorContainer').text(message).show();
    }

    function selectUnselect(documentId) {
        // finding clicked card
        var clickedCard = document.querySelector('.doc-card[onclick="selectUnselect(' + documentId + ')"]');

        // if clicked card is already selected
        if (clickedCard.classList.contains('selected')) {
            // If yes remove the selected class
            clickedCard.classList.remove('selected');
            document.getElementById('documentOptionsContainer').innerHTML = '';
        } else {
            // if not, deselect any other selected card
            document.querySelectorAll('.doc-card').forEach(function (card) {
                card.classList.remove('selected');
            });

            // Adding 'selected' class to the clicked card
            clickedCard.classList.add('selected');

            // Loading the DocumentPreview partial view for the selected document using AJAX
            $.get('/Document/GetDocumentOptions', { documentId: documentId }, function (response) {
                $('#documentOptionsContainer').html(response);
            });
        }
    }

    function loadDocumentNotesForCategory(propertyCategoryId) {
        $.get('/Document/GetDocumentNotesByCategory', { propertyCategoryId: propertyCategoryId }, function (response) {
            $('#documentNotesContainer').html(response).slideDown(); 
        });
    }

    $(document).on("click", "#deleteNoteBtm", function () {
        var documentId = $(this).data("id");
        $.ajax({
            url: '/Document/DeleteNoteFromDocument',
            type: 'POST',
            data: {
                documentId: documentId
            },
            success: function (response) {
                if (response.success) {
                    $('#modalContainer').modal('hide');

                    // Reload only the notes section to see the updated changes
                    loadDocumentNotesForCategory(@Model.CurrentCategory.PropertyCategoryId);

                } else {
                    displayErrorMessage(response);
                }
                $('#deleteNoteBtm').prop('disabled', false).text('Delete Note');
            },
            error: function (xhr) {
                displayErrorMessage(xhr);
                $('#deleteNoteBtm').prop('disabled', false).text('Delete Note');
            }
        });
    });

    $(document).on("click", "#renameDocumentBtn", function () {
        const documentId = $(this).data("id");
        const renameForm = $("#renameDocumentForm");
        const formData = new FormData(renameForm[0]);
        formData.append('documentId', documentId);
        $.ajax({
            url: '/Document/DocumentFileNameRename',
            type: 'POST', 
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response.success) {
                    $.ajax({
                        url: '/Document/UpdateList',
                        type: 'GET',
                        data: { id: @Model.CurrentCategory.PropertyCategoryId },
                        success: function (result) {
                            // Replace the document list with the updated content
                            $('#documentContainer').html(result);
                            $('#modalContainer').modal('hide');
                            $('#documentOptionsContainer').empty();
                            //to reload the notes list once a document is deleted
                            loadDocumentNotesForCategory(@Model.CurrentCategory.PropertyCategoryId);

                        },
                        error: function () {
                            alert('An error occurred while updating the document list.');
                        }
                    });
                } else {
                    $('#modalContainer').html(response);
                }
                $('#renameDocumentBtn').prop('disabled', false).text('Rename');
            },
            error: function (xhr) {
                displayErrorMessage(xhr);
                $('#renameDocumentBtn').prop('disabled', false).text('Rename');
            }
        });
    });
</script>
