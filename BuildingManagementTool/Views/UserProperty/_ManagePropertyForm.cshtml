@model ManagePropertyFormViewModel

<style>
    .gallery-item {
        max-width: 15rem;
        width: 100%;
        height: 10rem;
        border: 4px solid #f0f0f0;
        border-radius: 10px;
        position:relative;
    }
    
    .gallery-item img {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }

    .empty-item {
        border: 4px dashed #f0f0f0;
        border-radius: 10px;
    }

    .selected-item {
        border: 4px solid darkgreen;
    }

    .remove-img-btn {
        position:absolute;
        border-radius: 50%;
        width: 2rem;
        height: 2rem;
        top: -0.5rem;
        right: -0.5rem;
    }

    .remove-img-btn:hover {
        filter: brightness(80%);
    }

</style>

<div id="managePropertyModal" class="modal-dialog modal-lg modal-dialog-centered" role="document">
    <div class="modal-content px-4">
        <div class="modal-header">
            <h2>Manage Property</h2>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>

        <div class="modal-body">
            <div asp-validation-summary="All" class="text-danger"></div>
            <form id="propertyForm" method="post" enctype="multipart/form-data">
                <div class="form-group d-flex flex-column">
                    <label asp-for="PropertyName">Property Name/Address</label>
                    <input asp-for="PropertyName" name="PropertyName" class="form-control" type="text" placeholder="Enter Property Name or Address" value="@Model.PropertyName"></input>
                </div>
                <div class="row mt-4">
                    <h4 class="col-lg-12">Upload Images</h4>
                    <div class="col-lg-2">
                        <input type="file" id="image-upload" asp-for="Images" name="Images" accept="image/*" multiple style="display: none;">
                        <input type="button" value="Browse..." class="btn btn-primary" onclick="document.getElementById('image-upload').click();" />
                    </div>
                    
                    <div id="gallery" class="col-lg-10 row row-cols-2 justify-content-end g-2 mt-1" style="position:relative;">
                        <label style="position:absolute; top: -2.5rem; left:8rem;" for="gallery" class="col-12">Select an image for the display picture</label>
                        @for (int i = 0; i < 4; i++)
                        {
                            if (i < Model.ImageUrls.Count)
                            {
                                var dict = Model.ImageUrls[i];
                                if (dict != null && dict.Count > 0)
                                {
                                    var kvp = dict.FirstOrDefault();
                                    if (kvp.Value != null && kvp.Value.Count > 0 && !string.IsNullOrEmpty(kvp.Value[0]))
                                    {
                                        var isSelected = kvp.Value.Count > 2 && kvp.Value[2] == "True" ? "selected-item" : "";
                                        <div class="mt-0 col gallery-item d-flex justify-content-center align-items-center @isSelected" data-file="@kvp.Value[0]">
                                            <button type="button" class="remove-img-btn fas fa-xmark"></button>
                                            <img class="img-fluid" src="@kvp.Value[1]" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="mt-0 col mx-1 gallery-item empty-item d-flex justify-content-center align-items-center">
                                            <h5>No Image</h5>
                                        </div>
                                    }
                                }
                            }
                        }
                    </div>
                </div>
                <div class="errorContainer alert alert-danger mt-2" style="display:none;"></div>
            </form>
            <form id="viewerForm" method="post">
                <div class="row mt-4">
                    <h4 class="col-lg-12">Add Viewers</h4>
                    <div class="col-lg-12">
                        <label asp-for="AddViewerViewModel.Email"></label>
                        <div class="row">
                            <div class="col-lg-6">
                                <input asp-for="AddViewerViewModel.Email" id="viewerEmail" class="form-control" type="email" placeholder="Enter a recipient's email" required></input>
                            </div>
                            <div class="col-lg-3">
                                <button id="sendInviteBtn" form="viewerForm" type="button" class="btn btn-primary" data-id="@Model.CurrentProperty.PropertyId">Send Invite</button>
                            </div>  
                        </div>
                        
                    </div>
                    <div class="col-lg-8 mt-2">
                        <ul class="list-group">
                            @if (Model.ViewerEmails.Any())
                            {
                                foreach (var email in Model.ViewerEmails)
                                {
                                    <li class="list-group-item d-flex align-items-center" data-id="@email.Key">
                                        @email.Value
                                        <i class="fas fa-x removeEmailBtn ms-auto" style="cursor:pointer;" data-id="@Model.CurrentProperty.PropertyId"></i>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <div class="row justify-content-end">
                <div class="col-auto">
                    <button type="button" class="btn-secondary rounded me-2" data-bs-dismiss="modal">Close</button>
                    <button id="savePropertyBtn" form="propertyForm" class="btn-primary rounded" type="button" data-id="@Model.CurrentProperty.PropertyId">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        let fileArray = [];
        let filesToRemove = [];
        var form = document.getElementById('propertyForm');
        const fileInput = document.getElementById('image-upload');
        var errorContainer = form.querySelector('.errorContainer');

        $('#image-upload').on('change', function (event) {
            const files = event.target.files; // Get the uploaded files
            console.log(fileArray)
            // Clear existing error message
            $(errorContainer).hide();
            // Add new files to the array
            for (let i = 0; i < files.length; i++) {
                if (fileArray.length < 4) {
                    fileArray.push(files[i]);
                }
                else {
                    $(errorContainer).text("Only a maximum of 4 images is allowed").show();
                    break;
                }
            }

            const gallery = document.getElementById('gallery');
            const emptyItems = gallery.querySelectorAll('.empty-item'); // Get all empty items
            const availableCon = emptyItems.length;

            // Keep track of images added
            let fileIndex = 0;
            let itemIndex = 0;

            // Function to handle adding a file to an empty item
            function addFileToEmptyItem(file) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.className = 'img-thumbnail img-fluid';
                    img.src = e.target.result; // Set the image source to the file data URL

                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'remove-img-btn fas fa-xmark';
                    removeBtn.type = 'button';
                    removeBtn.setAttribute('data-file', file.name);

                    if (emptyItems[itemIndex]) {
                        const emptyItem = emptyItems[itemIndex];
                        emptyItem.innerHTML = ''; // Clear existing content
                        emptyItem.appendChild(img); // Add the image
                        emptyItem.appendChild(removeBtn);
                        emptyItem.classList.remove('empty-item');
                        emptyItem.setAttribute('data-file', file.name);
                        itemIndex++;
                    }
                };
                reader.readAsDataURL(file); // Read the file as a Data URL
            }

            // Add files to empty items up to the number of available empty items
            while (fileIndex < fileArray.length && itemIndex < availableCon) {
                addFileToEmptyItem(files[fileIndex]);
                fileIndex++;
            }

            // Show error message if more files were selected than empty items
            if (fileIndex > availableCon) {
                $(errorContainer).text("Only a maximum of 4 images is allowed").show();
            }
        });

        function replaceFiles(fileInput, fileArray) {
            const dataTransfer = new DataTransfer();

            fileArray.forEach(file => {
                dataTransfer.items.add(file);
            });

            fileInput.files = dataTransfer.files;
        }

        $(document).off('click', '.gallery-item').on('click', '.gallery-item', function (event) {
            console.log('gallery item clicked');
            const imageItem = $(this);
            if (imageItem.find('img').length > 0) {
                console.log('Image found within gallery item');
                if (imageItem.hasClass('selected-item')) {
                    console.log('selected-item removed');
                    imageItem.removeClass('selected-item');
                } else {
                    $('.gallery-item').removeClass('selected-item');
                    imageItem.addClass('selected-item');
                }
            } else {
                console.log('No image found within gallery item');
            }
        });

        $(document).off('click', '#savePropertyBtn').on('click', '#savePropertyBtn', function (event) {
            console.log("Save clicked")
            const propertyForm = $("#propertyForm")
            const propertyId = $(this).data('id');
            const selectedItem = $('.selected-item');
            let selectedItemName = "";
            if (selectedItem.length > 0) {
                selectedItemName = selectedItem.data('file')
            }

            if (fileArray.length > 0) {
                replaceFiles(fileInput, fileArray)
            }
            var formData = new FormData(propertyForm[0])
            formData.append('id', propertyId);
            formData.append('selectedFileName', selectedItemName);
            formData.append('filesToRemove', filesToRemove);
            $.ajax({
                url: '/UserProperty/ManagePropertyFormSubmit',
                type: 'POST',
                data: formData,
                contentType: false,  // Important for file uploads (must be false)
                processData: false,  // Prevent jQuery from processing the FormData
                success: function (response) {
                    if (response.success) {
                        $.ajax({
                            url: '/UserProperty/UpdatePropertyContainer',
                            type: 'GET',
                            success: function (result) {
                                $('#propertyModalContainer').modal('hide');
                                $('#propertyContainer').html(result);
                            },
                            error: function () {
                                displayErrorMessage(response);
                            }
                        });
                    } else {
                        console.log('return validation errors')
                        $('#propertyModalContainer').html(response);
                    }
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                }
            });
        })
        
        $(document).off('click', '.remove-img-btn').on('click', '.remove-img-btn', function (event) {
            event.stopPropagation();
            const parentDiv = $(this).parent('div');
            const img = parentDiv.find('img');
            img.remove();
            const noImage = document.createElement('h5');
            noImage.textContent = 'No Image';
            parentDiv.addClass('empty-item')
            parentDiv.removeClass('selected-item')
            parentDiv.append(noImage);
            
            if (parentDiv.data('file') !== undefined && parentDiv.data('file') != null) {
                const fileName = parentDiv.data('file');
                filesToRemove.push(fileName)
                parentDiv.removeData('file');
                console.log('FilesToRemove', filesToRemove);
            }

            if ($(this).data('file') !== undefined && $(this).data('file') !== null) {
                const fileName = $(this).data('file');
                fileArray = fileArray.filter(file => file.name !== fileName);
                parentDiv.removeData('file');
                console.log('fileArray', fileArray);
                console.log($(this).data('file'))
            }

            $(this).remove();
        })

        $(document).off('click', '#sendInviteBtn').on('click', '#sendInviteBtn', function (event) {
            console.log("Send invite clicked")
            var emailValue = $('#viewerEmail').val();
            var propertyId = $(this).data('id');
            var sendBtn = $(this);
            console.log(emailValue)
            $.ajax({
                url: '/UserProperty/SendInviteEmail',
                type: 'POST',
                data: {  id: propertyId, email: emailValue },
                success: function (response) {
                    if (response.success) {
                        sendBtn.prop("disabled", true);
                        sendBtn.text("Invite sent");
                    }
                    else{
                        console.log('return validation errors')
                        $('#propertyModalContainer').html(response);
                    }
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                }
            });
        })

        $(document).off('change', '#viewerEmail').on('change', '#viewerEmail', function () {
            var sendBtn = $("#sendInviteBtn");
            console.log("Email changed");
            if (sendBtn.prop("disabled")) {
                sendBtn.prop("disabled", false);
            }
        });

        $(document).off('click', '.removeEmailBtn').on('click', '.removeEmailBtn', function (event) {
            console.log("remove email clicked")
            var listitem = $(this).closest('li');
            var emailValue = listitem.contents().filter(function () {
                return this.nodeType === 3;
            }).text().trim()
            var propertyId = $(this).data('id');
            $.ajax({
                url: '/UserProperty/DeleteUserProperty',
                type: 'POST',
                data: { id: propertyId, email: emailValue },
                success: function (response) {
                    listitem.remove();
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                }
            });
        })
    })
</script>
