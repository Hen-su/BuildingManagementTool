@model CategoryViewModel


<style>
    .categoryBox{
        height: auto;
    }

    .categoryBox, .sideBox {
        height: 15rem;
        border-left: 5px solid skyblue;
        background-color: white;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        flex: 1 1 23%;
    }

    .sideBoxContainer:last-of-type {
        border-right: 5px solid skyblue;
    }

    .propertyBox {
        height: 15rem;
        border: 1px solid #ddd
    }

    .propertyBoxContainer{
        border-left: 5px solid skyblue;
    }

    .canvasRow .categoryBox:last-of-type {
        border-left: 5px solid skyblue;
        border-right: 5px solid skyblue;
    }

        .sideBox:first-child{
        border-bottom: 5px solid skyblue;
        }
    .categoryBox:hover, .sideBox:hover {
        background-color: #f0f0f0;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    }

    .boxHeader {
        margin-top: 1rem;
    }

    .categoryBox.expanded, .sideBox.expanded {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%; /* Full width of the container */
        height: 100%; /* Full height of the container */
        z-index: 10; /* Ensure it appears above other content */
        overflow: auto; /* Enable scrolling if content overflows */
        padding: 20px;
        box-sizing: border-box;
        background-color: white; /* Optional: ensure background color */
        max-width: none;
        border: none;
    }

    .canvasRow {
        border-top: 5px solid skyblue;
    }

    .canvasRow:last-of-type {
        border-bottom: 5px solid skyblue;
    }


</style>

@if (User.IsInRole("Manager"))
{
    <h2 class="mt-5 mb-5">You're in Manage Mode!</h2>
    <a id="categoryModalBtn" class="btn btn-primary mb-3">Add Category</a>
}
else
{
    <h2 class="mt-5 mb-5">You're in View Mode!</h2>
}

<div id="categoryContainer">
    <partial name="_CategoryCanvas" model="Model" />
</div>
<div class="errorContainer alert alert-danger mt-2" style="display:none;"></div>
<div id="categoryModalContainer" class="modal shadow" role="dialog"></div>


<script>
    $(document).ready(function () {
        $('#categoryModalContainer').on('hidden.bs.modal', function () {
            console.log("emptied");
            $('body').removeClass('modal-open');
            $(this).empty();
        });

        $('#categoryModalBtn').click(function (event) {
            console.log("add category clicked")
            var currentProperty = @Model.Property.PropertyId;
            var url = "/PropertyCategory/CategoryFormPartial/" + encodeURIComponent(currentProperty);
            $("#categoryModalContainer").load(url, function () {
                $("#categoryModalContainer").modal("show");
            });
        });

        $(document).on('click', '#addBtn', function (event) {
            console.log("Add clicked")
            var categoryName = $(".categoryName").val();
            console.log($(".categoryName").val());
            console.log($(".categoryName").length);
            $.ajax({
                url: '/PropertyCategory/AddCategory',
                type: 'POST',
                data: { id: '@Model.Property.PropertyId', name: categoryName },
                success: function (response) {
                    if (response.success) {
                        $.ajax({
                            url: '/PropertyCategory/UpdateCategoryCanvas',
                            type: 'GET',
                            data: { id: '@Model.Property.PropertyId' },
                            success: function (result) {
                                $('#categoryContainer').html(result);
                                $('#categoryModalContainer').modal('hide');
                            },
                            error: function () {
                                alert('An error occurred while adding the category');
                            }
                        });
                    } else {
                        displayErrorMessage(response);
                    }
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                }
            });
        })

        $(document).off("click", ".deleteCategoryModalBtn").on('click', '.deleteCategoryModalBtn', function (event) {
            event.stopPropagation();
            console.log("deleteConf clicked")
            var categoryId = $(this).data("id");
            $("#categoryModalContainer").load("/PropertyCategory/DeleteConfirmationPartial?id=" + categoryId, function () {
                $("#categoryModalContainer").modal("show");
            });
        })

        $(document).on("click", ".deleteCategoryConfirmBtn", function (event) {
            console.log("Delete clicked")
            var categoryId = $(this).data('id');
            $.ajax({
                url: '/Blob/DeletePropertyCategory',
                type: 'POST',
                data: { id: categoryId },
                success: function (response) {
                    if (response.success) {
                        $.ajax({
                            url: '/PropertyCategory/UpdateCategoryCanvas',
                            type: 'GET',
                            data: { id: '@Model.Property.PropertyId' },
                            success: function (result) {
                                // Replace the document list with the updated content
                                $('#categoryContainer').html(result);
                                $('#categoryModalContainer').modal('hide');
                            },
                            error: function () {
                                alert('An error occurred while deleting the category');
                            }
                        });
                    } else {
                        displayErrorMessage(response);
                    }
                },
                error: function (xhr) {
                    displayErrorMessage(xhr);
                }
            });
        })

        function displayErrorMessage(response) {
            let message = 'An unexpected error occurred.';

            if (response.responseJSON && response.responseJSON.message) {
                message = response.responseJSON.message;
            } else if (response.message) {
                message = response.message;
            } else if (response.statusText) {
                message = response.statusText;
            }

            $('.errorContainer').text(message).show();
        }
    })

    
</script>