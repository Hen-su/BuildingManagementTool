@model CategoryViewModel

<div class="canvasContainer container position-relative p-0">
    <div class="canvasRow row w-100 mx-0 d-flex justify-content-around">
        @for (int i = 0; i < 4 && i < Model.PropertyCategories.Count(); i++)
        {
            <partial name="_CategoryBox" model="Model.PropertyCategories.ElementAt(i)"></partial>
        }
    </div>

    <div class="canvasRow row w-100 mx-0 d-flex justify-content-around">
        <div class="col-lg-3 p-0 sideBoxContainer">

            @if (Model.PropertyCategories.Count() > 4)
            {
                <partial name="_SideBox" model="Model.PropertyCategories.ElementAt(4)"></partial>
            }

            @if (Model.PropertyCategories.Count() > 5)
            {
                <partial name="_SideBox" model="Model.PropertyCategories.ElementAt(5)"></partial>
            }
        </div>
        <div class="propertyBoxContainer col-lg-6 d-flex justify-content-between align-items-center">
            <div class="w-100 h-auto propertyBox">
                <img src="@Model.PropertyImageUrl" class="img-fluid" alt="Property Image" />
            </div>
        </div>
        <div class="col-lg-3 p-0 sideBoxContainer">

            @if (Model.PropertyCategories.Count() > 6)
            {
                <partial name="_SideBox" model="Model.PropertyCategories.ElementAt(6)"></partial>
            }


            @if (Model.PropertyCategories.Count() > 7)
            {
                <partial name="_SideBox" model="Model.PropertyCategories.ElementAt(7)"></partial>
            }
        </div>
    </div>
    @{
        var columnsPerRow = 4;
        @for (int i = 8; i < Model.PropertyCategories.Count(); i++)
        {
            // Start a new row every 4 columns
            if ((i - 8) % columnsPerRow == 0)
            {
                if (i > 8)
                {
                    @:</div> 
                }
                @:<div class="canvasRow row w-100 mx-0 d-flex justify-content-around">
            }
            <partial name="_CategoryBox" model="Model.PropertyCategories.ElementAt(i)"></partial> 
        }
        @if ((Model.PropertyCategories.Count() - 8) % columnsPerRow != 0)
        {
            @:</div>
        }
    }   
</div>

<script>
    $(document).ready(function () {
        $(document).on('click', '.categoryBox, .sideBox', function (event) {
            if ($(event.target).is('.dropdown, .dropdown *')) {
                return;
            }
            var catDiv = $(this)
            var categoryId = catDiv.data('id');

            $(document).on('click', '.collapseBtn', function (event) {
                if (catDiv.hasClass('expanded')) {
                    catDiv.removeClass('expanded').find('.documentContent').slideUp(function () {
                        $(this).remove(); // Remove the content after sliding up
                        console.log('shrink')
                    });
                    if ($('#modalContainer').length) {
                        $('#modalContainer').remove();
                        console.log('Modal container removed');
                    }
                    catDiv.children('.boxHeader').first().show();
                }
            });

            //Collapse box if already opened
            if (catDiv.hasClass('expanded')) {
                catDiv.removeClass('expanded').find('.documentContent').slideUp(function () {
                    $(this).remove(); // Remove the content after sliding up
                    console.log('shrink')
                });
                catDiv.children('.boxHeader').first().show();
            } else {
                // Collapse any other expanded boxes
                $('.categoryBox, .sideBox').removeClass('expanded').find('.documentContent').slideUp(function () {
                    $(this).remove(); // Remove the content after sliding up
                    console.log('shrink')
                });
                catDiv.children('.boxHeader').first().hide();
                // Expand the clicked box
                catDiv.addClass('expanded');
                console.log('expand')
                $.ajax({
                    url: '/Document/Index',
                    type: 'GET',
                    data: { id: categoryId },
                    success: function (result) {
                        var $documentContent = $('<div class="documentContent container"></div>').html(result).hide();
                        catDiv.append($documentContent); // Append the new content
                        $documentContent.css('position', 'absolute');
                        $documentContent.css('cursor', 'default');
                        $documentContent.slideDown();
                        $('html, body').animate({ scrollTop: 0 }, 'fast');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading documents: " + error);
                    }
                });
            }
        });

        $(document).on('click', '.documentContent', function (event) {
            event.stopPropagation(); // Prevents the click from bubbling up to parent elements
        });

        
    });
</script>
